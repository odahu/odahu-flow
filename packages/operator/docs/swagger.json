{
    "swagger": "2.0",
    "info": {
        "description": "This is an API Gateway webServer.",
        "title": "API Gateway",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "paths": {
        "/api/v1/batch/job": {
            "get": {
                "description": "List an InferenceJob",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "List an InferenceJob",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of entities in a response",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of a page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InferenceJob"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "post": {
                "description": "Create an InferenceJob",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Create an InferenceJob",
                "parameters": [
                    {
                        "description": "InferenceJob",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InferenceJob"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/InferenceJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/batch/job/{id}": {
            "get": {
                "description": "Get an InferenceJob by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Get an InferenceJob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "InferenceJob id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InferenceJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an InferenceJob",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Delete an InferenceJob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "InferenceJob id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/batch/service": {
            "get": {
                "description": "List an InferenceService",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "List an InferenceService",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of entities in a response",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of a page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/InferenceService"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an InferenceService",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Update an InferenceService",
                "parameters": [
                    {
                        "description": "InferenceService",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InferenceService"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InferenceService"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "post": {
                "description": "Create an InferenceService",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Create an InferenceService",
                "parameters": [
                    {
                        "description": "InferenceService",
                        "name": "service",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/InferenceService"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/InferenceService"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/batch/service/{id}": {
            "get": {
                "description": "Get an InferenceService by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Get an InferenceService",
                "parameters": [
                    {
                        "type": "string",
                        "description": "InferenceService id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/InferenceService"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an InferenceService",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Batch"
                ],
                "summary": "Delete an InferenceService",
                "parameters": [
                    {
                        "type": "string",
                        "description": "InferenceService id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/configuration": {
            "get": {
                "description": "Get the Odahuflow service configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Get the Odahuflow service configuration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Config"
                        }
                    }
                }
            }
        },
        "/api/v1/connection": {
            "get": {
                "description": "Get list of Connections",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connection"
                ],
                "summary": "Get list of Connections",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Toolchain",
                        "name": "type",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Number of entities in a response",
                        "name": "size",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Number of a page",
                        "name": "page",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Connection"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a Connection. Results is updated Connection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connection"
                ],
                "summary": "Update a Connection",
                "parameters": [
                    {
                        "description": "Update a Connection",
                        "name": "connection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Connection"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a Connection. Results is created Connection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connection"
                ],
                "summary": "Create a Connection",
                "parameters": [
                    {
                        "description": "Create a Connection",
                        "name": "connection",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Connection"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/Connection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/connection/{id}": {
            "get": {
                "description": "Get a Connection by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connection"
                ],
                "summary": "Get a Connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Connection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Connection by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connection"
                ],
                "summary": "Delete a Connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/connection/{id}/decrypted": {
            "get": {
                "description": "Get a decrypted Connection by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Connection"
                ],
                "summary": "Get a decrypted Connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Connection id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Connection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/feedback": {
            "post": {
                "description": "Send feedback about previously made prediction",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Feedback"
                ],
                "summary": "Send feedback about previously made prediction",
                "parameters": [
                    {
                        "description": "Feedback Request",
                        "name": "feedback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/feedback.ModelFeedbackRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Model name",
                        "name": "model-name",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Model version",
                        "name": "model-version",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Request ID",
                        "name": "request-id",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/feedback.ModelFeedback"
                        }
                    }
                }
            }
        },
        "/api/v1/model/deployment": {
            "get": {
                "description": "Get list of Model deployments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Get list of Model deployments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of entities in a response",
                        "name": "size",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Number of a page",
                        "name": "page",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModelDeployment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a Model  Results is updated Model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Update a Model deployment",
                "parameters": [
                    {
                        "description": "Update a Model deployment",
                        "name": "md",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModelDeployment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelDeployment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a Model  Results is created Model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Create a Model deployment",
                "parameters": [
                    {
                        "description": "Create a Model deployment",
                        "name": "md",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModelDeployment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ModelDeployment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/deployment-events": {
            "get": {
                "description": "Get Last Changes for ModelDeployment entity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Get Last Changes for ModelDeployment entities",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cursor can be passed to get only new changes",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LatestDeploymentEvents"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/deployment/{id}": {
            "get": {
                "description": "Get a Model deployment by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Get a Model deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model deployment id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelDeployment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Model deployment by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Delete a Model deployment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model deployment id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/deployment/{id}/default-route": {
            "get": {
                "description": "Get a Model deployment default route",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deployment"
                ],
                "summary": "Get a Model deployment default route",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model deployment id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelRoute"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/packaging": {
            "get": {
                "description": "Get list of Model Packagings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packaging"
                ],
                "summary": "Get list of Model Packagings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of entities in a response",
                        "name": "size",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Number of a page",
                        "name": "page",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModelPackaging"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a Model Packaging. Results is updated Model Packaging.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packaging"
                ],
                "summary": "Update a Model Packaging",
                "parameters": [
                    {
                        "description": "Update a Model Packaging",
                        "name": "MP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModelPackaging"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelPackaging"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a Model Packaging. Results is created Model Packaging.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packaging"
                ],
                "summary": "Create a Model Packaging",
                "parameters": [
                    {
                        "description": "Create a Model Packaging",
                        "name": "MP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModelPackaging"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ModelPackaging"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/packaging/{id}": {
            "get": {
                "description": "Get a Model Packaging by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packaging"
                ],
                "summary": "Get a Model Packaging",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model Packaging id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelPackaging"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Model Packaging by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packaging"
                ],
                "summary": "Delete a Model Packaging",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model Packaging id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/packaging/{id}/log": {
            "get": {
                "description": "Stream logs from model packaging pod",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Packaging"
                ],
                "summary": "Stream logs from model packaging pod",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "follow logs",
                        "name": "follow",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Model Packaging id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/model/packaging/{id}/result": {
            "put": {
                "description": "Save a Model Packaging by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packaging"
                ],
                "summary": "Save a Model Packaging result",
                "parameters": [
                    {
                        "description": "Model Packaging result",
                        "name": "MP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModelPackagingResult"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Model Packaging id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModelPackagingResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/route": {
            "get": {
                "description": "Get list of Model routes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Get list of Model routes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of entities in a response",
                        "name": "size",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Number of a page",
                        "name": "page",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModelRoute"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a Model route. Results is updated Model route.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Update a Model route",
                "parameters": [
                    {
                        "description": "Update a Model route",
                        "name": "mr",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModelRoute"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelRoute"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a Model route. Results is created Model route.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Create a Model route",
                "parameters": [
                    {
                        "description": "Create a Model route",
                        "name": "mr",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModelRoute"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ModelRoute"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/route-events": {
            "get": {
                "description": "Get Last Changes for ModelRoute entity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Get Last Changes for ModelRoute entities",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Cursor can be passed to get only new changes",
                        "name": "cursor",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/LatestRouteEvents"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/route/{id}": {
            "get": {
                "description": "Get a Model route by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Get a Model route",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model route id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelRoute"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Model route by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Route"
                ],
                "summary": "Delete a Model route",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model route id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/training": {
            "get": {
                "description": "Get list of Model Trainings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Get list of Model Trainings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of entities in a response",
                        "name": "size",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Number of a page",
                        "name": "page",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Model name",
                        "name": "model_name",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Model version",
                        "name": "model_version",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Toolchain name",
                        "name": "toolchain",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModelTraining"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a Model Training. Results is updated Model Training.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Update a Model Training",
                "parameters": [
                    {
                        "description": "Update a Model Training",
                        "name": "mt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModelTraining"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelTraining"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a Model Training. Results is created Model Training.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Create a Model Training",
                "parameters": [
                    {
                        "description": "Create a Model Training",
                        "name": "mt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ModelTraining"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ModelTraining"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/training/{id}": {
            "get": {
                "description": "Get a Model Training by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Get a Model Training",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model Training id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ModelTraining"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "delete": {
                "description": "Get a Model Training by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Get a Model Training",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Model Training id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/model/training/{id}/log": {
            "get": {
                "description": "Stream logs from model training pod",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Stream logs from model training pod",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "follow logs",
                        "name": "follow",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Model Training id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/model/training/{id}/result": {
            "put": {
                "description": "Save a Model Training by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Training"
                ],
                "summary": "Save a Model Training result",
                "parameters": [
                    {
                        "description": "Model Training result",
                        "name": "MP",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TrainingResult"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Model Training id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TrainingResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/packaging/integration": {
            "get": {
                "description": "Get list of PackagingIntegrations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packager"
                ],
                "summary": "Get list of PackagingIntegrations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of entities in a response",
                        "name": "size",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Number of a page",
                        "name": "page",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PackagingIntegration"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a PackagingIntegration. Results is updated PackagingIntegration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packager"
                ],
                "summary": "Update a PackagingIntegration",
                "parameters": [
                    {
                        "description": "Update a PackagingIntegration",
                        "name": "pi",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PackagingIntegration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackagingIntegration"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a PackagingIntegration. Results is created PackagingIntegration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packager"
                ],
                "summary": "Create a PackagingIntegration",
                "parameters": [
                    {
                        "description": "Create a PackagingIntegration",
                        "name": "ti",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PackagingIntegration"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PackagingIntegration"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/packaging/integration/{id}": {
            "get": {
                "description": "Get a PackagingIntegration by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packager"
                ],
                "summary": "Get a PackagingIntegration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PackagingIntegration id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackagingIntegration"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a PackagingIntegration by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Packager"
                ],
                "summary": "Delete a PackagingIntegration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PackagingIntegration id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/toolchain/integration": {
            "get": {
                "description": "Get list of ToolchainIntegrations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Toolchain"
                ],
                "summary": "Get list of ToolchainIntegrations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of entities in a response",
                        "name": "size",
                        "in": "path"
                    },
                    {
                        "type": "integer",
                        "description": "Number of a page",
                        "name": "page",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ToolchainIntegration"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a ToolchainIntegration. Results is updated ToolchainIntegration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Toolchain"
                ],
                "summary": "Update a ToolchainIntegration",
                "parameters": [
                    {
                        "description": "Update a ToolchainIntegration",
                        "name": "ti",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ToolchainIntegration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ToolchainIntegration"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a ToolchainIntegration. Results is created ToolchainIntegration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Toolchain"
                ],
                "summary": "Create a ToolchainIntegration",
                "parameters": [
                    {
                        "description": "Create a ToolchainIntegration",
                        "name": "ti",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ToolchainIntegration"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ToolchainIntegration"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/toolchain/integration/{id}": {
            "get": {
                "description": "Get a ToolchainIntegration by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Toolchain"
                ],
                "summary": "Get a ToolchainIntegration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ToolchainIntegration id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ToolchainIntegration"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a ToolchainIntegration by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Toolchain"
                ],
                "summary": "Delete a ToolchainIntegration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ToolchainIntegration id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPResult"
                        }
                    }
                }
            }
        },
        "/api/v1/user/info": {
            "get": {
                "description": "Get the user information(email, name and so on)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get the user information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserInfo"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ConnectionReference": {
            "type": "object",
            "properties": {
                "connection": {
                    "description": "ODAHU Connection",
                    "type": "string"
                },
                "path": {
                    "description": "User can override path otherwise Connection path will be used.\nFor dataSource:\nInput data files must have .json extension and be valid JSON files that follows\n[Predict Protocol - Version 2](https://github.com/kubeflow/kfserving/blob/v0.5.1/docs/predict-api/v2/required_api.md#inference-request-json-object).\nFor outputDestination:\nOutput data files must have .json extension and be valid JSON files that follows\n[Predict Protocol - Version 2](https://github.com/kubeflow/kfserving/blob/v0.5.1/docs/predict-api/v2/required_api.md#inference-response-json-object).\nnFor modelSource:\nIf path has .zip / .tar.gz suffix then it will be unpacked before delivering to user predictor container.\nOtherwise its considered and a directory and will be delivered to user predictor container AS-IS",
                    "type": "string"
                }
            }
        },
        "InferenceJob": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt describes when InferenceJob was launched (readonly)",
                    "type": "string"
                },
                "id": {
                    "description": "Resource ID",
                    "type": "string"
                },
                "spec": {
                    "description": "Spec describes parameters of InferenceJob",
                    "type": "object",
                    "$ref": "#/definitions/InferenceJobSpec"
                },
                "status": {
                    "description": "Spec describes execution status of InferenceJob (readonly)",
                    "type": "object",
                    "$ref": "#/definitions/InferenceJobStatus"
                },
                "updatedAt": {
                    "description": "UpdatedAt describes when InferenceJob was updated (readonly)",
                    "type": "string"
                }
            }
        },
        "InferenceJobSpec": {
            "type": "object",
            "properties": {
                "dataSource": {
                    "description": "DataSource defines location input data files.\nInput data files must have .json extension and be valid JSON files that follows\n[Predict Protocol - Version 2](https://github.com/kubeflow/kfserving/blob/v0.5.1/docs/predict-api/v2/required_api.md#inference-request-json-object)\nIf nil then will be filled from BatchInferenceService.",
                    "type": "object",
                    "$ref": "#/definitions/ConnectionReference"
                },
                "inferenceServiceId": {
                    "description": "InferenceServiceID refers to BatchInferenceService",
                    "type": "string"
                },
                "nodeSelector": {
                    "description": "Node selector for specifying a node pool",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "outputDestination": {
                    "description": "OutputDestination defines location of directory with output files.\nOutput data files must have .json extension and be valid JSON files that follows\n[Predict Protocol - Version 2](https://github.com/kubeflow/kfserving/blob/v0.5.1/docs/predict-api/v2/required_api.md#inference-response-json-object)\nIf nil then will be filled from BatchInferenceService.",
                    "type": "object",
                    "$ref": "#/definitions/ConnectionReference"
                },
                "requestId": {
                    "description": "BatchRequestID is unique identifier for InferenceJob that helps to correlate between\nModel input, model output and feedback\nTake into account that it is not the same as kubeflow InferenceRequest id\nEach InferenceJob can process more than one InferenceRequest (delivered in separate input file)\nSo each BatchRequestID has set of corresponding InferenceRequest and their IDs",
                    "type": "string"
                },
                "resources": {
                    "description": "Resources for model container\nThe same format like k8s uses for pod resources.",
                    "type": "object",
                    "$ref": "#/definitions/ResourceRequirements"
                }
            }
        },
        "InferenceJobStatus": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message is any message from runtime service about status of InferenceJob",
                    "type": "string"
                },
                "podName": {
                    "description": "PodName is a name of Pod in Kubernetes that is running under the hood of InferenceJob",
                    "type": "string"
                },
                "reason": {
                    "description": "Reason is a reason of some InferenceJob state that was retrieved from runtime service.\nfor example reason of failure",
                    "type": "string"
                },
                "state": {
                    "description": "State describes current state of InferenceJob",
                    "type": "string"
                }
            }
        },
        "InferenceService": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "When resource was created. Managed by system. Cannot be overridden by User",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "spec": {
                    "type": "object",
                    "$ref": "#/definitions/InferenceServiceSpec"
                },
                "status": {
                    "type": "object",
                    "$ref": "#/definitions/InferenceServiceStatus"
                },
                "updatedAt": {
                    "description": "When resource was updated. Managed by system. Cannot be overridden by User",
                    "type": "string"
                }
            }
        },
        "InferenceServiceSpec": {
            "type": "object",
            "properties": {
                "args": {
                    "description": "Arguments to the entrypoint.\nThe docker image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax\ncan be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,\nregardless of whether the variable exists or not.\nCannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Entrypoint array. Not executed within a shell.\nThe docker image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax\ncan be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,\nregardless of whether the variable exists or not.\nCannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dataSource": {
                    "description": "DataSource defines location input data files.\nInput data files must have .json extension and be valid JSON files that follows\n[Predict Protocol - Version 2](https://github.com/kubeflow/kfserving/blob/v0.5.1/docs/predict-api/v2/required_api.md#inference-request-json-object)\nCan be overridden in BatchInferenceJob definition",
                    "type": "object",
                    "$ref": "#/definitions/ConnectionReference"
                },
                "image": {
                    "description": "Image is OCI image that contains user defined prediction code",
                    "type": "string"
                },
                "modelRegistry": {
                    "description": "ModelRegistry defines location of ML model files",
                    "type": "object",
                    "$ref": "#/definitions/ModelSource"
                },
                "nodeSelector": {
                    "description": "Node selector for specifying a node pool",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "outputDestination": {
                    "description": "OutputDestination defines location of directory with output files.\nOutput data files must have .json extension and be valid JSON files that follows\n[Predict Protocol - Version 2](https://github.com/kubeflow/kfserving/blob/v0.5.1/docs/predict-api/v2/required_api.md#inference-response-json-object)\nCan be overridden in BatchInferenceJob definition",
                    "type": "object",
                    "$ref": "#/definitions/ConnectionReference"
                },
                "resources": {
                    "description": "Resources for model container\nThe same format like k8s uses for pod resources.",
                    "type": "object",
                    "$ref": "#/definitions/ResourceRequirements"
                },
                "triggers": {
                    "description": "Triggers are describe how to run InferenceService",
                    "type": "object",
                    "$ref": "#/definitions/InferenceServiceTriggers"
                }
            }
        },
        "InferenceServiceStatus": {
            "type": "object"
        },
        "InferenceServiceTriggers": {
            "type": "object",
            "properties": {
                "webhook": {
                    "description": "Webhook provides a REST API to execute InferenceJob that correspond to this service",
                    "type": "object",
                    "$ref": "#/definitions/PredictorWebhookTrigger"
                }
            }
        },
        "PredictorWebhookTrigger": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Enabled. If True then it possible to run InferenceJob by creating it using REST API",
                    "type": "boolean"
                }
            }
        },
        "APIBackendConfig": {
            "type": "object",
            "properties": {
                "local": {
                    "description": "Local backend",
                    "type": "object",
                    "$ref": "#/definitions/APILocalBackendConfig"
                },
                "type": {
                    "description": "Type of the backend. Available values:\n   * local\n   * config",
                    "type": "string"
                }
            }
        },
        "APIConfig": {
            "type": "object",
            "properties": {
                "backend": {
                    "type": "object",
                    "$ref": "#/definitions/APIBackendConfig"
                },
                "port": {
                    "description": "API HTTP port",
                    "type": "integer"
                }
            }
        },
        "APILocalBackendConfig": {
            "type": "object",
            "properties": {
                "localBackendCrdPath": {
                    "description": "Path to a dir with ODAHU CRDs",
                    "type": "string"
                }
            }
        },
        "AuthConfig": {
            "type": "object",
            "properties": {
                "apiToken": {
                    "description": "It is a mock for the future. Currently, it is always empty.",
                    "type": "string"
                },
                "apiUrl": {
                    "description": "ODAHU API URL",
                    "type": "string"
                },
                "clientId": {
                    "description": "OpenID client_id credential for service account",
                    "type": "string"
                },
                "clientSecret": {
                    "description": "OpenID client_secret credential for service account",
                    "type": "string"
                },
                "oauthOidcTokenEndpoint": {
                    "description": "OpenID token url",
                    "type": "string"
                }
            }
        },
        "BatchConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Enable batch API/operator",
                    "type": "boolean"
                },
                "namespace": {
                    "description": "Kubernetes namespace, where BatchInferenceService and BatchInferenceJob will be created",
                    "type": "string"
                },
                "nodePools": {
                    "description": "Node pools to run batch jobs",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NodePool"
                    }
                },
                "rcloneImage": {
                    "description": "RClone image that will be used to sync data with object storage",
                    "type": "string"
                },
                "serviceAccountName": {
                    "description": "Specifies a ServiceAccount object that provides custom credentials for executing the TaskRun",
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout for full batch process",
                    "type": "string"
                },
                "tolerations": {
                    "description": "Kubernetes tolerations for batch jobs",
                    "type": "string"
                },
                "toolsImage": {
                    "description": "ODAHU tools image",
                    "type": "string"
                },
                "toolsSecret": {
                    "description": "ODAHU tools image",
                    "type": "string"
                }
            }
        },
        "Claims": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "CommonConfig": {
            "type": "object",
            "properties": {
                "databaseConnectionString": {
                    "description": "Database connection string",
                    "type": "string"
                },
                "externalUrls": {
                    "description": "The collection of external urls, for example: metrics, edge, service catalog and so on",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalUrl"
                    }
                },
                "gracefulTimeout": {
                    "description": "Graceful shutdown timeout",
                    "type": "string"
                },
                "launchPeriod": {
                    "description": "How often launch new training",
                    "type": "string"
                },
                "oauthOidcTokenEndpoint": {
                    "description": "OpenID token url",
                    "type": "string"
                },
                "resourceGpuName": {
                    "description": "Kubernetes can consume the GPU resource in the \u003cvendor\u003e.com/gpu format.\nFor example, amd.com/gpu or nvidia.com/gpu.",
                    "type": "string"
                },
                "version": {
                    "description": "Version of ODAHU platform",
                    "type": "string"
                }
            }
        },
        "Config": {
            "type": "object",
            "properties": {
                "api": {
                    "type": "object",
                    "$ref": "#/definitions/APIConfig"
                },
                "batch": {
                    "type": "object",
                    "$ref": "#/definitions/BatchConfig"
                },
                "common": {
                    "type": "object",
                    "$ref": "#/definitions/CommonConfig"
                },
                "connection": {
                    "type": "object",
                    "$ref": "#/definitions/ConnectionConfig"
                },
                "deployment": {
                    "type": "object",
                    "$ref": "#/definitions/ModelDeploymentConfig"
                },
                "operator": {
                    "type": "object",
                    "$ref": "#/definitions/OperatorConfig"
                },
                "packager": {
                    "type": "object",
                    "$ref": "#/definitions/PackagerConfig"
                },
                "packaging": {
                    "type": "object",
                    "$ref": "#/definitions/ModelPackagingConfig"
                },
                "serviceCatalog": {
                    "type": "object",
                    "$ref": "#/definitions/ServiceCatalog"
                },
                "trainer": {
                    "type": "object",
                    "$ref": "#/definitions/TrainerConfig"
                },
                "training": {
                    "type": "object",
                    "$ref": "#/definitions/ModelTrainingConfig"
                },
                "users": {
                    "type": "object",
                    "$ref": "#/definitions/UserConfig"
                }
            }
        },
        "ConnectionConfig": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Connection API server and operator are enabled",
                    "type": "boolean"
                },
                "namespace": {
                    "description": "Enable connection API/operator",
                    "type": "string"
                },
                "repositoryType": {
                    "description": "Storage backend for connections. Available options:\n  * kubernetes\n  * vault",
                    "type": "string"
                },
                "vault": {
                    "description": "Connection Vault configuration",
                    "type": "object",
                    "$ref": "#/definitions/Vault"
                }
            }
        },
        "EdgeConfig": {
            "type": "object",
            "properties": {
                "host": {
                    "description": "External model host",
                    "type": "string"
                }
            }
        },
        "ExternalUrl": {
            "type": "object",
            "properties": {
                "imageUrl": {
                    "description": "Optional link to an image which represents a type of the resource, for example the logo of Grafana",
                    "type": "string"
                },
                "name": {
                    "description": "Human-readable name",
                    "type": "string"
                },
                "url": {
                    "description": "Link to a resource",
                    "type": "string"
                }
            }
        },
        "JWKS": {
            "type": "object",
            "properties": {
                "enabled": {
                    "description": "Model authorization enabled",
                    "type": "boolean"
                },
                "issuer": {
                    "description": "Issuer claim value",
                    "type": "string"
                },
                "url": {
                    "description": "JWKS URL",
                    "type": "string"
                }
            }
        },
        "ModelDeploymentConfig": {
            "type": "object",
            "properties": {
                "defaultDockerPullConnName": {
                    "description": "Default connection ID which will be used if a user doesn't specify it in a model deployment",
                    "type": "string"
                },
                "defaultResources": {
                    "description": "Default resources for deployment pods",
                    "type": "object",
                    "$ref": "#/definitions/ResourceRequirements"
                },
                "edge": {
                    "type": "object",
                    "$ref": "#/definitions/EdgeConfig"
                },
                "enabled": {
                    "description": "Enable deployment API/operator",
                    "type": "boolean"
                },
                "istio": {
                    "type": "object",
                    "$ref": "#/definitions/ModelDeploymentIstioConfig"
                },
                "namespace": {
                    "description": "Kubernetes namespace, where model deployments will be deployed",
                    "type": "string"
                },
                "nodePools": {
                    "description": "Node pools to run deployments",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NodePool"
                    }
                },
                "security": {
                    "type": "object",
                    "$ref": "#/definitions/ModelDeploymentSecurityConfig"
                },
                "tolerations": {
                    "description": "Kubernetes tolerations for model deployments",
                    "type": "string"
                }
            }
        },
        "ModelDeploymentIstioConfig": {
            "type": "object",
            "properties": {
                "namespace": {
                    "description": "Istio ingress gateway namespace",
                    "type": "string"
                },
                "serviceName": {
                    "description": "Istio ingress gateway service name",
                    "type": "string"
                }
            }
        },
        "ModelDeploymentSecurityConfig": {
            "type": "object",
            "properties": {
                "jwks": {
                    "type": "object",
                    "$ref": "#/definitions/JWKS"
                },
                "roleName": {
                    "description": "Deprecated",
                    "type": "string"
                }
            }
        },
        "ModelPackagingConfig": {
            "type": "object",
            "properties": {
                "defaultResources": {
                    "description": "Default resources for packaging pods",
                    "type": "object",
                    "$ref": "#/definitions/ResourceRequirements"
                },
                "enabled": {
                    "description": "Enable packaging API/operator",
                    "type": "boolean"
                },
                "modelPackagerImage": {
                    "type": "string"
                },
                "namespace": {
                    "description": "Kubernetes namespace, where model trainings will be deployed",
                    "type": "string"
                },
                "nodePools": {
                    "description": "Node pools to run packaging tasks on",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NodePool"
                    }
                },
                "outputConnectionID": {
                    "type": "string"
                },
                "packagerIntegrationNamespace": {
                    "type": "string"
                },
                "packagingIntegrationRepositoryType": {
                    "description": "Storage backend for packaging integrations. Available options:\n  * kubernetes\n  * postgres",
                    "type": "string"
                },
                "serviceAccount": {
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout for full training process",
                    "type": "string"
                },
                "tolerations": {
                    "description": "Kubernetes tolerations for model packaging pods",
                    "type": "string"
                }
            }
        },
        "ModelTrainingConfig": {
            "type": "object",
            "properties": {
                "defaultResources": {
                    "description": "Default resources for training pods",
                    "type": "object",
                    "$ref": "#/definitions/ResourceRequirements"
                },
                "enabled": {
                    "description": "Enable deployment API/operator",
                    "type": "boolean"
                },
                "gpuNodePools": {
                    "description": "Node pools to run GPU training tasks on",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NodePool"
                    }
                },
                "gpuTolerations": {
                    "description": "Kubernetes tolerations for GPU model trainings pods",
                    "type": "string"
                },
                "metricUrl": {
                    "type": "string"
                },
                "modelTrainerImage": {
                    "type": "string"
                },
                "namespace": {
                    "description": "Kubernetes namespace, where model trainings will be deployed",
                    "type": "string"
                },
                "nodePools": {
                    "description": "Node pools to run training tasks on",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NodePool"
                    }
                },
                "outputConnectionID": {
                    "type": "string"
                },
                "serviceAccount": {
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout for full training process",
                    "type": "string"
                },
                "tolerations": {
                    "description": "Kubernetes tolerations for model trainings pods",
                    "type": "string"
                },
                "toolchainIntegrationNamespace": {
                    "type": "string"
                },
                "toolchainIntegrationRepositoryType": {
                    "description": "Storage backend for toolchain integrations. Available options:\n  * kubernetes\n  * postgres",
                    "type": "string"
                }
            }
        },
        "NodePool": {
            "type": "object",
            "properties": {
                "nodeSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "OperatorConfig": {
            "type": "object",
            "properties": {
                "auth": {
                    "type": "object",
                    "$ref": "#/definitions/AuthConfig"
                },
                "monitoringPort": {
                    "description": "Operator HTTP monitoring port",
                    "type": "integer"
                }
            }
        },
        "PackagerConfig": {
            "type": "object",
            "properties": {
                "auth": {
                    "type": "object",
                    "$ref": "#/definitions/AuthConfig"
                },
                "modelTrainingId": {
                    "description": "ID of the model packaging",
                    "type": "string"
                },
                "mpFile": {
                    "description": "The path to the configuration file for a user packager.",
                    "type": "string"
                },
                "outputDir": {
                    "description": "The path to the dir when a user packager will save their result.",
                    "type": "string"
                }
            }
        },
        "ServiceCatalog": {
            "type": "object",
            "properties": {
                "auth": {
                    "description": "Auth configures connection parameters to ODAHU API Server",
                    "type": "object",
                    "$ref": "#/definitions/AuthConfig"
                },
                "baseUrl": {
                    "description": "BaseURL is a prefix to service catalog web server endpoints",
                    "type": "string"
                },
                "debug": {
                    "description": "enabled Debug increase logger verbosity and format. Default: false",
                    "type": "boolean"
                },
                "edgeHost": {
                    "description": "ServiceCatalog set EdgeHost as Host header in requests to ML servers",
                    "type": "string"
                },
                "edgeURL": {
                    "description": "ServiceCatalog uses EdgeURL to call MLServer by adding ModelRoute prefix to EdgeURL path",
                    "type": "string"
                },
                "fetchTimeout": {
                    "description": "FetchTimeout configures how often new events will be fetched. Default 5 seconds.",
                    "type": "integer"
                },
                "workersCount": {
                    "description": "WorkersCount configures how many workers will process events. Default: 4",
                    "type": "integer"
                }
            }
        },
        "TrainerConfig": {
            "type": "object",
            "properties": {
                "auth": {
                    "type": "object",
                    "$ref": "#/definitions/AuthConfig"
                },
                "modelTrainingId": {
                    "description": "ID of the model training",
                    "type": "string"
                },
                "mtFile": {
                    "description": "The path to the configuration file for a user trainer.",
                    "type": "string"
                },
                "outputDir": {
                    "description": "The path to the dir when a user trainer will save their result.",
                    "type": "string"
                }
            }
        },
        "UserConfig": {
            "type": "object",
            "properties": {
                "claims": {
                    "type": "object",
                    "$ref": "#/definitions/Claims"
                },
                "signOutUrl": {
                    "description": "The sign out endpoint logs out the authenticated ",
                    "type": "string"
                }
            }
        },
        "Vault": {
            "type": "object",
            "properties": {
                "insecure": {
                    "description": "Can be used to debug and local development. Skip TLS verification",
                    "type": "boolean"
                },
                "role": {
                    "description": "Vault role for access to the secret engine path",
                    "type": "string"
                },
                "secretEnginePath": {
                    "description": "Vault secret engine path where connection will be stored",
                    "type": "string"
                },
                "token": {
                    "description": "Optionally. Token for access to the vault server\nIf it is empty then client will use the k8s auth",
                    "type": "string"
                },
                "url": {
                    "description": "Vault URL",
                    "type": "string"
                }
            }
        },
        "Connection": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt",
                    "type": "string"
                },
                "id": {
                    "description": "Connection id",
                    "type": "string"
                },
                "spec": {
                    "description": "Connection specification",
                    "type": "object",
                    "$ref": "#/definitions/ConnectionSpec"
                },
                "status": {
                    "description": "Connection status",
                    "type": "object",
                    "$ref": "#/definitions/ConnectionStatus"
                },
                "updatedAt": {
                    "description": "UpdatedAt",
                    "type": "string"
                }
            }
        },
        "ModelDeployment": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt",
                    "type": "string"
                },
                "id": {
                    "description": "Model deployment id",
                    "type": "string"
                },
                "spec": {
                    "description": "Model deployment specification",
                    "type": "object",
                    "$ref": "#/definitions/ModelDeploymentSpec"
                },
                "status": {
                    "description": "Model deployment status",
                    "type": "object",
                    "$ref": "#/definitions/ModelDeploymentStatus"
                },
                "updatedAt": {
                    "description": "UpdatedAt",
                    "type": "string"
                }
            }
        },
        "ModelRoute": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt",
                    "type": "string"
                },
                "default": {
                    "description": "Default routes cannot be deleted by  They are managed by system\nOne ModelDeployment has exactly one default Route that gives 100% traffic to the model",
                    "type": "boolean"
                },
                "id": {
                    "description": "Model route id",
                    "type": "string"
                },
                "spec": {
                    "description": "Model route specification",
                    "type": "object",
                    "$ref": "#/definitions/ModelRouteSpec"
                },
                "status": {
                    "description": "Model route status",
                    "type": "object",
                    "$ref": "#/definitions/ModelRouteStatus"
                },
                "updatedAt": {
                    "description": "UpdatedAt",
                    "type": "string"
                }
            }
        },
        "DeploymentEvent": {
            "type": "object",
            "properties": {
                "datetime": {
                    "description": "When event is raised",
                    "type": "string"
                },
                "entityID": {
                    "description": "EntityID contains ID of ModelDeployment for ModelDeploymentDeleted and ModelDeploymentDeletionMarkIsSet\nevent types\nDoes not make sense in case of ModelDeploymentUpdate, ModelDeploymentCreate, ModelDeploymentStatusUpdated events",
                    "type": "string"
                },
                "payload": {
                    "description": "Payload contains ModelDeployment for ModelDeploymentUpdate, ModelDeploymentCreate,\nModelDeploymentStatusUpdated  events.\nDoes not make sense in case of ModelDeploymentDelete, ModelDeploymentDeletionMarkIsSet events",
                    "type": "object",
                    "$ref": "#/definitions/ModelDeployment"
                },
                "type": {
                    "description": "Possible values: ModelDeploymentCreate, ModelDeploymentUpdate, ModelRouteDeleted,\nModelDeploymentDeletionMarkIsSet, ModelDeploymentStatusUpdated",
                    "type": "string"
                }
            }
        },
        "LatestDeploymentEvents": {
            "type": "object",
            "properties": {
                "cursor": {
                    "type": "integer"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeploymentEvent"
                    }
                }
            }
        },
        "LatestRouteEvents": {
            "type": "object",
            "properties": {
                "cursor": {
                    "type": "integer"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RouteEvent"
                    }
                }
            }
        },
        "RouteEvent": {
            "type": "object",
            "properties": {
                "datetime": {
                    "description": "When event is raised",
                    "type": "string"
                },
                "entityID": {
                    "description": "EntityID contains ID of ModelRoute for ModelRouteDeleted and ModelRouteDeletionMarkIsSet\nevent types\nDoes not make sense in case of ModelRouteUpdate, ModelRouteCreate, ModelRouteStatusUpdated events",
                    "type": "string"
                },
                "payload": {
                    "description": "Payload contains ModelRoute for ModelRouteUpdate, ModelRouteCreate,\nModelRouteStatusUpdated  events.\nDoes not make sense in case of ModelRouteDelete, ModelRouteDeletionMarkIsSet events",
                    "type": "object",
                    "$ref": "#/definitions/ModelRoute"
                },
                "type": {
                    "description": "Possible values: ModelRouteCreate, ModelRouteUpdate, ModelRouteDeleted,\nModelRouteDeletionMarkIsSet, ModelRouteStatusUpdated",
                    "type": "string"
                }
            }
        },
        "feedback.ModelFeedback": {
            "type": "object",
            "properties": {
                "modelName": {
                    "type": "string"
                },
                "modelVersion": {
                    "type": "string"
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": true
                },
                "requestID": {
                    "type": "string"
                }
            }
        },
        "feedback.ModelFeedbackRequest": {
            "type": "object"
        },
        "HTTPResult": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Success of error message",
                    "type": "string"
                }
            }
        },
        "JsonSchema": {
            "type": "object",
            "properties": {
                "properties": {
                    "description": "Properties configuration",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Property"
                    }
                },
                "required": {
                    "description": "List of required properties",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "K8sPackager": {
            "type": "object",
            "properties": {
                "modelHolder": {
                    "description": "Connection where a trained model artifact is stored",
                    "type": "object",
                    "$ref": "#/definitions/Connection"
                },
                "modelPackaging": {
                    "description": "Model Packaging",
                    "type": "object",
                    "$ref": "#/definitions/ModelPackaging"
                },
                "packagingIntegration": {
                    "description": "Packaging integration",
                    "type": "object",
                    "$ref": "#/definitions/PackagingIntegration"
                },
                "targets": {
                    "description": "List of targets with appropriate connections",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PackagerTarget"
                    }
                },
                "trainingZipName": {
                    "description": "Name of trained model artifact name",
                    "type": "string"
                }
            }
        },
        "ModelPackaging": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt",
                    "type": "string"
                },
                "id": {
                    "description": "Model packaging id",
                    "type": "string"
                },
                "spec": {
                    "description": "Model packaging specification",
                    "type": "object",
                    "$ref": "#/definitions/ModelPackagingSpec"
                },
                "status": {
                    "description": "Model packaging status",
                    "type": "object",
                    "$ref": "#/definitions/ModelPackagingStatus"
                },
                "updatedAt": {
                    "description": "UpdatedAt",
                    "type": "string"
                }
            }
        },
        "ModelPackagingSpec": {
            "type": "object",
            "properties": {
                "arguments": {
                    "description": "List of arguments. This parameter depends on the specific packaging integration",
                    "type": "object",
                    "additionalProperties": true
                },
                "artifactName": {
                    "description": "Training output artifact name",
                    "type": "string"
                },
                "image": {
                    "description": "Image name. Packaging integration image will be used if this parameters is missed",
                    "type": "string"
                },
                "integrationName": {
                    "description": "Packaging integration ID",
                    "type": "string"
                },
                "nodeSelector": {
                    "description": "Node selector for specifying a node pool",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "outputConnection": {
                    "description": "Name of Connection to storage where a packager obtain a model trained artifact.\nPermitted connection types are defined by specific PackagingIntegration",
                    "type": "string"
                },
                "resources": {
                    "description": "Resources for packager container\nThe same format like k8s uses for pod resources.",
                    "type": "object",
                    "$ref": "#/definitions/ResourceRequirements"
                },
                "targets": {
                    "description": "List of targets. This parameter depends on the specific packaging integration",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Target"
                    }
                }
            }
        },
        "PackagerTarget": {
            "type": "object",
            "properties": {
                "connection": {
                    "description": "A Connection for this target",
                    "type": "object",
                    "$ref": "#/definitions/Connection"
                },
                "name": {
                    "description": "Target name",
                    "type": "string"
                }
            }
        },
        "PackagingIntegration": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt",
                    "type": "string"
                },
                "id": {
                    "description": "Packaging integration id",
                    "type": "string"
                },
                "spec": {
                    "description": "Packaging integration specification",
                    "type": "object",
                    "$ref": "#/definitions/PackagingIntegrationSpec"
                },
                "status": {
                    "description": "Packaging integration status",
                    "type": "object",
                    "$ref": "#/definitions/PackagingIntegrationStatus"
                },
                "updatedAt": {
                    "description": "UpdatedAt",
                    "type": "string"
                }
            }
        },
        "PackagingIntegrationSpec": {
            "type": "object",
            "properties": {
                "defaultImage": {
                    "description": "Default packaging Docker image",
                    "type": "string"
                },
                "entrypoint": {
                    "description": "Path to binary which starts a packaging process",
                    "type": "string"
                },
                "privileged": {
                    "description": "Enable docker privileged flag",
                    "type": "boolean"
                },
                "schema": {
                    "description": "Schema which describes targets and arguments for specific packaging integration",
                    "type": "object",
                    "$ref": "#/definitions/Schema"
                }
            }
        },
        "Parameter": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Parameter name",
                    "type": "string"
                },
                "value": {
                    "description": "Parameter value",
                    "type": "object"
                }
            }
        },
        "Property": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Property name",
                    "type": "string"
                },
                "parameters": {
                    "description": "List of property parameters",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Parameter"
                    }
                }
            }
        },
        "Schema": {
            "type": "object",
            "properties": {
                "arguments": {
                    "description": "Arguments schema",
                    "type": "object",
                    "$ref": "#/definitions/JsonSchema"
                },
                "targets": {
                    "description": "Targets schema",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TargetSchema"
                    }
                }
            }
        },
        "InputDataBindingDir": {
            "type": "object",
            "properties": {
                "dataBinding": {
                    "description": "Connection specific for data",
                    "type": "object",
                    "$ref": "#/definitions/ConnectionSpec"
                },
                "localPath": {
                    "description": "Local path",
                    "type": "string"
                },
                "remotePath": {
                    "description": "Remote path",
                    "type": "string"
                }
            }
        },
        "K8sTrainer": {
            "type": "object",
            "properties": {
                "algorithmSourceConnection": {
                    "description": "Connection for source code",
                    "type": "object",
                    "$ref": "#/definitions/Connection"
                },
                "inputData": {
                    "description": "Connection for training data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InputDataBindingDir"
                    }
                },
                "modelTraining": {
                    "description": "Model training",
                    "type": "object",
                    "$ref": "#/definitions/ModelTraining"
                },
                "outputConn": {
                    "description": "Connection for trained model artifact",
                    "type": "object",
                    "$ref": "#/definitions/Connection"
                },
                "toolchainIntegration": {
                    "description": "Toolchain integration",
                    "type": "object",
                    "$ref": "#/definitions/ToolchainIntegration"
                }
            }
        },
        "ModelTraining": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt",
                    "type": "string"
                },
                "id": {
                    "description": "Model training ID",
                    "type": "string"
                },
                "spec": {
                    "description": "Model training specification",
                    "type": "object",
                    "$ref": "#/definitions/ModelTrainingSpec"
                },
                "status": {
                    "description": "Model training status",
                    "type": "object",
                    "$ref": "#/definitions/ModelTrainingStatus"
                },
                "updatedAt": {
                    "description": "UpdatedAt",
                    "type": "string"
                }
            }
        },
        "ToolchainIntegration": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt",
                    "type": "string"
                },
                "id": {
                    "description": "Toolchain integration id",
                    "type": "string"
                },
                "spec": {
                    "description": "Toolchain integration specification",
                    "type": "object",
                    "$ref": "#/definitions/ToolchainIntegrationSpec"
                },
                "status": {
                    "description": "Toolchain integration status",
                    "type": "object",
                    "$ref": "#/definitions/ToolchainIntegrationStatus"
                },
                "updatedAt": {
                    "description": "UpdatedAt",
                    "type": "string"
                }
            }
        },
        "UserInfo": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "AlgorithmSource": {
            "type": "object",
            "properties": {
                "objectStorage": {
                    "type": "object",
                    "$ref": "#/definitions/ObjectStorage"
                },
                "vcs": {
                    "type": "object",
                    "$ref": "#/definitions/VCS"
                }
            }
        },
        "ConnectionSpec": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Custom description",
                    "type": "string"
                },
                "keyID": {
                    "description": "Key ID",
                    "type": "string"
                },
                "keySecret": {
                    "description": "SSH or service account secret",
                    "type": "string"
                },
                "password": {
                    "description": "Password",
                    "type": "string"
                },
                "publicKey": {
                    "description": "SSH public key",
                    "type": "string"
                },
                "reference": {
                    "description": "VCS reference",
                    "type": "string"
                },
                "region": {
                    "description": "AWS region or GCP project",
                    "type": "string"
                },
                "role": {
                    "description": "Service account role",
                    "type": "string"
                },
                "type": {
                    "description": "Required value. Available values:\n  * s3\n  * gcs\n  * azureblob\n  * git\n  * docker",
                    "type": "string"
                },
                "uri": {
                    "description": "URI. It is required value",
                    "type": "string"
                },
                "username": {
                    "description": "Username",
                    "type": "string"
                },
                "vital": {
                    "description": "Is connection vital (vital connection cannot be deleted)",
                    "type": "boolean"
                },
                "webUILink": {
                    "description": "Custom web UI link",
                    "type": "string"
                }
            }
        },
        "ConnectionStatus": {
            "type": "object",
            "properties": {
                "secretName": {
                    "description": "Kubernetes secret name",
                    "type": "string"
                },
                "serviceAccount": {
                    "description": "Kubernetes service account",
                    "type": "string"
                }
            }
        },
        "DataBindingDir": {
            "type": "object",
            "properties": {
                "connection": {
                    "description": "Connection name for data",
                    "type": "string"
                },
                "localPath": {
                    "description": "Local training path",
                    "type": "string"
                },
                "remotePath": {
                    "description": "Overwrite remote data path in connection",
                    "type": "string"
                }
            }
        },
        "EnvironmentVariable": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of an environment variable",
                    "type": "string"
                },
                "value": {
                    "description": "Value of an environment variable",
                    "type": "string"
                }
            }
        },
        "LocalModelSource": {
            "type": "object",
            "properties": {
                "meta": {
                    "type": "object",
                    "$ref": "#/definitions/ModelMeta"
                },
                "modelPath": {
                    "description": "ModelPath is a directory inside container where ML model files are located",
                    "type": "string"
                }
            }
        },
        "ModelDeploymentSpec": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations for model pods.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "image": {
                    "description": "Model Docker image",
                    "type": "string"
                },
                "imagePullConnID": {
                    "description": "If pulling of your image requires authorization, then you should specify the connection id",
                    "type": "string"
                },
                "livenessProbeInitialDelay": {
                    "description": "Initial delay for liveness probe of model pod",
                    "type": "integer"
                },
                "maxReplicas": {
                    "description": "Maximum number of pods for model. By default the max replicas parameter equals 1.",
                    "type": "integer"
                },
                "minReplicas": {
                    "description": "Minimum number of pods for model. By default the min replicas parameter equals 0.",
                    "type": "integer"
                },
                "nodeSelector": {
                    "description": "Node selector for specifying a node pool",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "predictor": {
                    "description": "ID of Predictor to use",
                    "type": "string"
                },
                "readinessProbeInitialDelay": {
                    "description": "Initial delay for readiness probe of model pod",
                    "type": "integer"
                },
                "resources": {
                    "description": "Resources for model deployment\nThe same format like k8s uses for pod resources.",
                    "type": "object",
                    "$ref": "#/definitions/ResourceRequirements"
                },
                "roleName": {
                    "description": "Initial delay for readiness probe of model pod",
                    "type": "string"
                }
            }
        },
        "ModelDeploymentStatus": {
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "description": "Number of available pods",
                    "type": "integer"
                },
                "deployment": {
                    "description": "The model k8s deployment name",
                    "type": "string"
                },
                "hostHeader": {
                    "description": "Host header value is a routing key for Istio Ingress\nto forward a request to appropriate Knative Service",
                    "type": "string"
                },
                "lastUpdatedTime": {
                    "description": "Time when credentials was updated",
                    "type": "string"
                },
                "modelName": {
                    "description": "Model name discovered in ModelDeployment",
                    "type": "string"
                },
                "modelVersion": {
                    "description": "Model version discovered in ModelDeployment",
                    "type": "string"
                },
                "replicas": {
                    "description": "Expected number of pods under current load",
                    "type": "integer"
                },
                "state": {
                    "description": "The state of a model \n  \"Processing\" - A model was not deployed. Because some parameters of the\n                 custom resource are wrong. For example, there is not a model\n                 image in a Docker registry.\n  \"Ready\" - A model was deployed successfully.",
                    "type": "string"
                }
            }
        },
        "ModelDeploymentTarget": {
            "type": "object",
            "properties": {
                "mdName": {
                    "description": "Model Deployment name",
                    "type": "string"
                },
                "weight": {
                    "description": "The proportion of traffic to be forwarded to the Model Deployment.",
                    "type": "integer"
                }
            }
        },
        "ModelIdentity": {
            "type": "object",
            "properties": {
                "artifactNameTemplate": {
                    "description": "Template of output artifact name",
                    "type": "string"
                },
                "name": {
                    "description": "Model name",
                    "type": "string"
                },
                "version": {
                    "description": "Model version",
                    "type": "string"
                }
            }
        },
        "ModelMeta": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "ModelPackagingResult": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of a result. It can be docker image, path to s3 artifact and so on",
                    "type": "string"
                },
                "value": {
                    "description": "Specific value",
                    "type": "string"
                }
            }
        },
        "ModelPackagingStatus": {
            "type": "object",
            "properties": {
                "exitCode": {
                    "description": "Pod exit code",
                    "type": "integer"
                },
                "message": {
                    "description": "Pod last log",
                    "type": "string"
                },
                "podName": {
                    "description": "Pod package for name",
                    "type": "string"
                },
                "reason": {
                    "description": "Pod reason",
                    "type": "string"
                },
                "results": {
                    "description": "List of packaing results",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModelPackagingResult"
                    }
                },
                "state": {
                    "description": "Model Packaging State",
                    "type": "string"
                }
            }
        },
        "ModelRouteSpec": {
            "type": "object",
            "properties": {
                "mirror": {
                    "description": "Mirror HTTP traffic to a another Model deployment in addition to forwarding\nthe requests to the model deployments.",
                    "type": "string"
                },
                "modelDeployments": {
                    "description": "A http rule can forward traffic to Model Deployments.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModelDeploymentTarget"
                    }
                },
                "urlPrefix": {
                    "description": "URL prefix for model  For example: /custom/test\nPrefix must start with slash\n\"/feedback\" and \"/model\" are reserved for internal usage",
                    "type": "string"
                }
            }
        },
        "ModelRouteStatus": {
            "type": "object",
            "properties": {
                "edgeUrl": {
                    "description": "Full url with prefix to a model deployment service",
                    "type": "string"
                },
                "state": {
                    "description": "State of Model Route",
                    "type": "string"
                }
            }
        },
        "ModelSource": {
            "type": "object",
            "properties": {
                "local": {
                    "description": "Local does not fetch model and assume that model is embedded into container",
                    "type": "object",
                    "$ref": "#/definitions/LocalModelSource"
                },
                "remote": {
                    "description": "Remote fetch model from remote model registry using ODAHU connections mechanism",
                    "type": "object",
                    "$ref": "#/definitions/RemoteModelSource"
                }
            }
        },
        "ModelTrainingSpec": {
            "type": "object",
            "properties": {
                "algorithmSource": {
                    "description": "AlgorithmSource for training",
                    "type": "object",
                    "$ref": "#/definitions/AlgorithmSource"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "data": {
                    "description": "Input data for a training",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DataBindingDir"
                    }
                },
                "dataNotRequired": {
                    "description": "Param used to skip data validation",
                    "type": "boolean"
                },
                "entrypoint": {
                    "description": "Model training file. It can be python\\bash script or jupiter notebook",
                    "type": "string"
                },
                "envs": {
                    "description": "Custom environment variables that should be set before entrypoint invocation.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EnvironmentVariable"
                    }
                },
                "hyperParameters": {
                    "description": "Model training hyperParameters in parameter:value format",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "image": {
                    "description": "Train image",
                    "type": "string"
                },
                "model": {
                    "description": "Model Identity",
                    "type": "object",
                    "$ref": "#/definitions/ModelIdentity"
                },
                "nodeSelector": {
                    "description": "Node selector for specifying a node pool",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "outputConnection": {
                    "description": "Name of Connection to storage where training output artifact will be stored.\nPermitted connection types are defined by specific toolchain",
                    "type": "string"
                },
                "resources": {
                    "description": "Resources for model container\nThe same format like k8s uses for pod resources.",
                    "type": "object",
                    "$ref": "#/definitions/ResourceRequirements"
                },
                "toolchain": {
                    "description": "IntegrationName of toolchain",
                    "type": "string"
                },
                "workDir": {
                    "description": "Directory with model scripts/files in a git repository",
                    "type": "string"
                }
            }
        },
        "ModelTrainingStatus": {
            "type": "object",
            "properties": {
                "artifacts": {
                    "description": "List of training results",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/TrainingResult"
                    }
                },
                "exitCode": {
                    "description": "Pod exit code",
                    "type": "integer"
                },
                "message": {
                    "description": "Pod last log",
                    "type": "string"
                },
                "podName": {
                    "description": "Pod package for name",
                    "type": "string"
                },
                "reason": {
                    "description": "Pod reason",
                    "type": "string"
                },
                "state": {
                    "description": "Model Packaging State",
                    "type": "string"
                }
            }
        },
        "ObjectStorage": {
            "type": "object",
            "properties": {
                "connection": {
                    "description": "Connection name for training model source",
                    "type": "string"
                },
                "path": {
                    "description": "Remote path in ObjectStorage",
                    "type": "string"
                }
            }
        },
        "PackagingIntegrationStatus": {
            "type": "object"
        },
        "RemoteModelSource": {
            "type": "object",
            "properties": {
                "modelConnection": {
                    "description": "ModelConnection is name of connection to object storage bucket where ML model files are expected",
                    "type": "string"
                },
                "modelPath": {
                    "description": "ModelPath is a directory inside ModelConnection where ML model files are located",
                    "type": "string"
                }
            }
        },
        "ResourceList": {
            "type": "object",
            "properties": {
                "cpu": {
                    "description": "Read more about CPU resource here https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#meaning-of-cpu",
                    "type": "string"
                },
                "gpu": {
                    "description": "Read more about GPU resource here https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/#using-device-plugins",
                    "type": "string"
                },
                "memory": {
                    "description": "Read more about memory resource here https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/#meaning-of-memory",
                    "type": "string"
                }
            }
        },
        "ResourceRequirements": {
            "type": "object",
            "properties": {
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.",
                    "type": "object",
                    "$ref": "#/definitions/ResourceList"
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.",
                    "type": "object",
                    "$ref": "#/definitions/ResourceList"
                }
            }
        },
        "Target": {
            "type": "object",
            "properties": {
                "connectionName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "TargetSchema": {
            "type": "object",
            "properties": {
                "connectionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "default": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "required": {
                    "type": "boolean"
                }
            }
        },
        "ToolchainIntegrationSpec": {
            "type": "object",
            "properties": {
                "additionalEnvironments": {
                    "description": "Additional environments for a training process",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "defaultImage": {
                    "description": "Default training Docker image",
                    "type": "string"
                },
                "entrypoint": {
                    "description": "Path to binary which starts a training process",
                    "type": "string"
                }
            }
        },
        "ToolchainIntegrationStatus": {
            "type": "object"
        },
        "TrainingResult": {
            "type": "object",
            "properties": {
                "artifactName": {
                    "description": "Trained artifact name",
                    "type": "string"
                },
                "commitID": {
                    "description": "VCS commit",
                    "type": "string"
                },
                "runId": {
                    "description": "Mlflow run ID",
                    "type": "string"
                }
            }
        },
        "VCS": {
            "type": "object",
            "properties": {
                "connection": {
                    "description": "Connection name for training model source",
                    "type": "string"
                },
                "reference": {
                    "description": "VCS Reference",
                    "type": "string"
                }
            }
        }
    }
}