// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	batch "github.com/odahu/odahu-flow/packages/operator/pkg/apis/batch"

	filter "github.com/odahu/odahu-flow/packages/operator/pkg/utils/filter"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, bis
func (_m *Service) Create(ctx context.Context, bis *batch.InferenceService) error {
	ret := _m.Called(ctx, bis)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *batch.InferenceService) error); ok {
		r0 = rf(ctx, bis)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Service) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *Service) Get(ctx context.Context, id string) (batch.InferenceService, error) {
	ret := _m.Called(ctx, id)

	var r0 batch.InferenceService
	if rf, ok := ret.Get(0).(func(context.Context, string) batch.InferenceService); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(batch.InferenceService)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, options
func (_m *Service) List(ctx context.Context, options ...filter.ListOption) ([]batch.InferenceService, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []batch.InferenceService
	if rf, ok := ret.Get(0).(func(context.Context, ...filter.ListOption) []batch.InferenceService); ok {
		r0 = rf(ctx, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]batch.InferenceService)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...filter.ListOption) error); ok {
		r1 = rf(ctx, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, bis
func (_m *Service) Update(ctx context.Context, id string, bis batch.InferenceService) error {
	ret := _m.Called(ctx, id, bis)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, batch.InferenceService) error); ok {
		r0 = rf(ctx, id, bis)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
