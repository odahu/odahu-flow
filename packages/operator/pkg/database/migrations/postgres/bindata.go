// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package postgres generated by go-bindata.// sources:
// pkg/database/migrations/postgres/sources/000001_zero.down.sql
// pkg/database/migrations/postgres/sources/000001_zero.up.sql
// pkg/database/migrations/postgres/sources/000002_init.down.sql
// pkg/database/migrations/postgres/sources/000002_init.up.sql
// pkg/database/migrations/postgres/sources/000003_route.down.sql
// pkg/database/migrations/postgres/sources/000003_route.up.sql
// pkg/database/migrations/postgres/sources/000004_deletionmark.down.sql
// pkg/database/migrations/postgres/sources/000004_deletionmark.up.sql
// pkg/database/migrations/postgres/sources/000005_created_updated.down.sql
// pkg/database/migrations/postgres/sources/000005_created_updated.up.sql
// pkg/database/migrations/postgres/sources/000006_created_updated_delmark_for_route.down.sql
// pkg/database/migrations/postgres/sources/000006_created_updated_delmark_for_route.up.sql
package postgres

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_zeroDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xa8\x4a\x2d\xca\x57\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\x03\x04\x00\x00\xff\xff\x55\xb8\xd3\x29\x11\x00\x00\x00")

func _000001_zeroDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_zeroDownSql,
		"000001_zero.down.sql",
	)
}

func _000001_zeroDownSql() (*asset, error) {
	bytes, err := _000001_zeroDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_zero.down.sql", size: 17, mode: os.FileMode(420), modTime: time.Unix(1601471077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_zeroUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xa8\x4a\x2d\xca\x57\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\x03\x04\x00\x00\xff\xff\x55\xb8\xd3\x29\x11\x00\x00\x00")

func _000001_zeroUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_zeroUpSql,
		"000001_zero.up.sql",
	)
}

func _000001_zeroUpSql() (*asset, error) {
	bytes, err := _000001_zeroUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_zero.up.sql", size: 17, mode: os.FileMode(420), modTime: time.Unix(1601471077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x4f\x49\xcc\x28\x8d\xcf\x2f\x48\x2d\x4a\x2c\xc9\x2f\x8a\x2f\x29\x4a\xcc\xcc\xcb\xcc\x4b\x27\x4e\x75\x41\x62\x72\x76\x62\x3a\xd1\xca\x53\x52\x0b\x72\xf2\x2b\x73\x53\xf3\x4a\x48\x73\x4c\x7c\x66\x5e\x49\x6a\x7a\x51\x62\x49\x66\x7e\x1e\x89\x0e\x43\xd5\xea\xec\xef\xeb\xeb\x19\xa2\x60\x0d\x08\x00\x00\xff\xff\x80\xaa\x9b\xf0\x11\x01\x00\x00")

func _000002_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_initDownSql,
		"000002_init.down.sql",
	)
}

func _000002_initDownSql() (*asset, error) {
	bytes, err := _000002_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init.down.sql", size: 273, mode: os.FileMode(420), modTime: time.Unix(1601471077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\xd1\xc1\x8a\x83\x30\x10\x06\xe0\x7b\x9e\x62\x8e\x0a\x7b\x5c\xf6\xe2\x29\x4a\x76\x37\x6d\xd5\x12\x43\xa9\x27\x19\x34\x68\xa8\x4d\x42\x1c\x0f\x7d\xfb\x42\xdb\x17\xe8\xa1\x78\x9c\xe1\x87\xef\x87\x3f\x17\x7f\xb2\xca\x18\x2b\x94\xe0\x5a\x80\xe6\xf9\x41\x80\xfc\x85\xaa\xd6\x20\xce\xb2\xd1\x0d\xf8\x01\xa7\xb5\xf3\xc1\x44\x24\x1f\x3b\x8a\x68\x9d\x75\x23\x4b\x18\x00\x80\x1d\x00\xe0\xc4\x55\xf1\xcf\x55\xf2\xf3\x9d\xc2\x51\xc9\x92\xab\x16\xf6\xa2\xfd\x7a\x24\x96\x60\x7a\xd8\x35\x75\x95\xbf\x6e\x42\x5a\x97\xe7\x87\xa5\x19\x7b\x07\x0f\xd8\x5f\x70\xdc\x4a\x1f\x4c\x98\xfd\xed\x6a\x1c\x6d\xc2\x93\xf7\x73\x3f\xa1\x75\x9d\x75\x64\xc6\x88\x64\xbd\xdb\x76\x86\xcf\x34\x29\xea\xb2\x94\x3a\xbb\x07\x00\x00\xff\xff\x09\x72\x36\x73\x9c\x02\x00\x00")

func _000002_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_initUpSql,
		"000002_init.up.sql",
	)
}

func _000002_initUpSql() (*asset, error) {
	bytes, err := _000002_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init.up.sql", size: 668, mode: os.FileMode(420), modTime: time.Unix(1601471077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_routeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x4f\x49\xcc\x28\x8d\xcf\x2f\x48\x2d\x4a\x2c\xc9\x2f\x8a\x2f\xca\x2f\x2d\x49\xb5\xe6\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\x96\x06\x58\x69\x39\x00\x00\x00")

func _000003_routeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_routeDownSql,
		"000003_route.down.sql",
	)
}

func _000003_routeDownSql() (*asset, error) {
	bytes, err := _000003_routeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_route.down.sql", size: 57, mode: os.FileMode(420), modTime: time.Unix(1601471077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000003_routeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8d\xbf\x0a\xc2\x30\x18\x07\xf7\x3c\xc5\x6f\x6c\xc1\x51\x5c\x3a\xa5\xe5\x53\xa3\x26\x91\xe4\x43\xec\x54\x82\x0d\xe8\x94\x92\x26\xef\x2f\xfe\x19\xef\x38\xb8\x9e\x0e\xca\x74\x42\x0c\x8e\x24\x13\x58\xf6\x17\x82\xda\xc3\x58\x06\xdd\x95\x67\x8f\x34\x87\x67\x9d\xd2\x12\x73\x28\x29\x4f\x39\xd5\x12\x45\x23\x00\xe0\x35\x03\xb8\x49\x37\x1c\xa5\x6b\x76\xdb\x16\x57\xa7\xb4\x74\x23\xce\x34\x6e\xbe\xc5\xba\xc4\x07\x4e\xde\x9a\xfe\xcf\x25\x94\xba\xfe\x8c\x68\x3f\x63\xab\xb5\xe2\xee\x1d\x00\x00\xff\xff\x1b\x91\x14\x0a\x88\x00\x00\x00")

func _000003_routeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_routeUpSql,
		"000003_route.up.sql",
	)
}

func _000003_routeUpSql() (*asset, error) {
	bytes, err := _000003_routeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_route.up.sql", size: 136, mode: os.FileMode(420), modTime: time.Unix(1601471077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000004_deletionmarkDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xcc\xb1\x0d\xc2\x40\x0c\x05\xd0\x9e\x29\xac\xac\x91\x0e\x84\x50\x8a\x40\x43\x1f\x7d\x72\x56\x38\xc5\x67\x5b\x96\x53\xb0\x3d\x1b\x5c\x93\x01\xde\xbb\xde\x1f\xd3\x73\xbc\x40\x92\x83\x12\x1f\x61\xb2\x82\xef\xb1\x98\x73\x20\x2d\x96\x0c\x54\xad\xba\x51\x09\x73\x5a\x4d\x8e\xa6\x34\x14\x16\xce\x6a\xda\x10\xfb\xd0\xf5\x8e\x75\xc7\x76\x22\x28\xec\x62\xbf\xc6\x9a\xdd\xe1\xf6\x9a\xe7\xe9\x3d\xfe\x03\x00\x00\xff\xff\x28\x9d\x34\x19\xd1\x00\x00\x00")

func _000004_deletionmarkDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_deletionmarkDownSql,
		"000004_deletionmark.down.sql",
	)
}

func _000004_deletionmarkDownSql() (*asset, error) {
	bytes, err := _000004_deletionmarkDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_deletionmark.down.sql", size: 209, mode: os.FileMode(420), modTime: time.Unix(1601471077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000004_deletionmarkUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xcc\x31\x0e\x82\x50\x0c\x06\xe0\x9d\x53\xfc\xe1\x1a\x4c\x6a\xd0\x90\x88\x0e\xba\x93\x62\x2b\xbe\x50\xda\x97\x97\xbe\xc1\xdb\x7b\x03\x07\x13\x2f\xf0\xed\xfb\xd3\x70\xe9\x1a\xd2\x90\x82\xa0\x59\x05\xce\xf4\xaa\x93\x67\x29\x14\x5e\xa6\x28\x94\x2c\xd9\xd2\x00\x00\x31\xa3\x65\x51\x89\xe4\xb6\x51\x59\x5b\xcc\xee\x2a\x64\x60\x79\x52\xd5\xc0\x71\x77\xbe\xf5\x30\x0f\x58\x55\xfd\x4a\x67\x7a\xac\xb4\xfc\xc7\x66\xc9\xea\xef\x4d\x2c\x7e\xc5\x0f\xd7\x71\x1c\xee\xdd\x27\x00\x00\xff\xff\x0a\x00\xba\xa4\x22\x01\x00\x00")

func _000004_deletionmarkUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000004_deletionmarkUpSql,
		"000004_deletionmark.up.sql",
	)
}

func _000004_deletionmarkUpSql() (*asset, error) {
	bytes, err := _000004_deletionmarkUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000004_deletionmark.up.sql", size: 290, mode: os.FileMode(420), modTime: time.Unix(1601471077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000005_created_updatedDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\x31\x0a\xc2\x50\x0c\x06\xe0\xdd\x53\xe4\x1e\xdd\x14\x91\x0e\xd5\xc5\xbd\xfc\xbe\x84\x5a\x7c\x4d\x42\xc8\x1b\xbc\xbd\x9b\x93\xa2\xed\x01\x3e\xbe\xfd\xf1\xd4\x9f\xbb\x1d\x6a\x4a\x50\xe2\x56\x85\x8c\x71\x6f\xa3\xb9\x04\xd2\x62\xcc\xc0\xac\xb3\x4e\xc4\x61\x4e\xc5\x6a\x5b\x94\x4a\x08\x52\x78\x3d\x6c\xce\x3f\xa1\xa3\x3c\x30\x6d\x29\x3f\xcb\x7f\x4e\x16\xaf\xf6\x5c\x44\x73\x75\xfa\x85\xbe\xd7\xc3\x65\x18\xfa\x6b\xf7\x0a\x00\x00\xff\xff\x24\xd4\x8a\xba\x6a\x01\x00\x00")

func _000005_created_updatedDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_created_updatedDownSql,
		"000005_created_updated.down.sql",
	)
}

func _000005_created_updatedDownSql() (*asset, error) {
	bytes, err := _000005_created_updatedDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_created_updated.down.sql", size: 362, mode: os.FileMode(420), modTime: time.Unix(1601471077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000005_created_updatedUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xce\x3d\x0e\x82\x40\x10\x05\xe0\x9e\x53\xcc\x3d\xe8\x34\xc6\x50\xa0\x8d\x3d\x79\x32\x13\xdc\xb8\x7f\x19\x1f\x85\x9e\xde\x03\x48\xb3\x72\x81\x2f\xdf\xe1\x74\x1e\x2e\x7d\x87\x48\x73\x21\xee\xd1\xa4\x28\x1e\xeb\x54\xaa\x39\x58\x7c\xa2\x23\xe4\x90\x97\x4e\x44\x04\xaa\x32\xbb\x81\xa6\xc2\x90\xec\x45\xa4\xca\x4f\x1b\xb0\x56\x6d\x02\x2a\xe6\x27\x96\x3d\x85\x5f\xa1\xf5\xa0\x56\x63\x79\x27\xcb\xfc\x3b\xb1\x41\x6c\x2e\x8e\xd7\x71\x1c\x6e\xfd\x37\x00\x00\xff\xff\x66\x6f\xf8\x11\x9a\x01\x00\x00")

func _000005_created_updatedUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000005_created_updatedUpSql,
		"000005_created_updated.up.sql",
	)
}

func _000005_created_updatedUpSql() (*asset, error) {
	bytes, err := _000005_created_updatedUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000005_created_updated.up.sql", size: 410, mode: os.FileMode(420), modTime: time.Unix(1601471077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000006_created_updated_delmark_for_routeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xcc\x31\x0a\x83\x50\x0c\x06\xe0\xdd\x53\xe4\x04\x5e\xe0\x6d\x2d\xa5\x38\xd8\x2e\xdd\x25\xbe\xfc\x50\x69\x34\x21\x24\xf7\x2f\x78\x05\xc7\x6f\xf9\x6e\x8f\xe7\xf4\x6a\x03\x6b\x22\x28\x79\x55\x90\x09\x7f\x6b\xf4\x5a\x75\xeb\xe3\x89\xc5\x1c\xc1\x69\xb1\x84\x55\x82\x24\xcc\xa9\x9b\xd6\x7e\x50\x0f\x70\x42\xae\x14\xe5\x72\xb5\x10\x28\x72\xb3\x63\xe7\xf8\xb5\xe1\xfe\x9e\xe7\xe9\xd3\xfe\x01\x00\x00\xff\xff\xb1\x16\xe1\x13\xdc\x00\x00\x00")

func _000006_created_updated_delmark_for_routeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000006_created_updated_delmark_for_routeDownSql,
		"000006_created_updated_delmark_for_route.down.sql",
	)
}

func _000006_created_updated_delmark_for_routeDownSql() (*asset, error) {
	bytes, err := _000006_created_updated_delmark_for_routeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000006_created_updated_delmark_for_route.down.sql", size: 220, mode: os.FileMode(420), modTime: time.Unix(1606218309, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000006_created_updated_delmark_for_routeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xcc\x31\xaa\xc2\x40\x10\x06\xe0\x3e\xa7\xf8\xc9\x01\x72\x81\x54\xef\x49\x94\x80\xd1\x42\xfb\x30\xc9\x8c\x18\x9c\xdd\x59\xd6\x99\xc6\xd3\x0b\x1e\x41\x2c\xbf\xe6\xfb\x1f\x0e\xe3\xa9\x6f\x48\x5d\x2a\x9c\x16\x15\x18\xd3\x3d\xba\x12\x8b\x6e\x6b\xf7\xc1\x6c\x45\x2a\xb9\xd5\xb9\x5a\xb8\x34\x00\x40\xcc\x58\xab\x90\x0b\xc3\xb7\x24\x4f\xa7\x54\xfc\xf5\x6d\x15\x85\x7f\x55\xb5\x2c\x2a\xbe\x59\x4e\x54\x1f\x2d\x16\x33\x15\xca\x60\xb9\x51\xa8\x63\xff\x77\xbc\x0c\xc8\xe6\xc8\xa1\xda\x37\xbb\xf3\x34\x8d\xd7\xfe\x1d\x00\x00\xff\xff\x70\x35\xa5\x50\x09\x01\x00\x00")

func _000006_created_updated_delmark_for_routeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000006_created_updated_delmark_for_routeUpSql,
		"000006_created_updated_delmark_for_route.up.sql",
	)
}

func _000006_created_updated_delmark_for_routeUpSql() (*asset, error) {
	bytes, err := _000006_created_updated_delmark_for_routeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000006_created_updated_delmark_for_route.up.sql", size: 265, mode: os.FileMode(420), modTime: time.Unix(1606218309, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_zero.down.sql":                              _000001_zeroDownSql,
	"000001_zero.up.sql":                                _000001_zeroUpSql,
	"000002_init.down.sql":                              _000002_initDownSql,
	"000002_init.up.sql":                                _000002_initUpSql,
	"000003_route.down.sql":                             _000003_routeDownSql,
	"000003_route.up.sql":                               _000003_routeUpSql,
	"000004_deletionmark.down.sql":                      _000004_deletionmarkDownSql,
	"000004_deletionmark.up.sql":                        _000004_deletionmarkUpSql,
	"000005_created_updated.down.sql":                   _000005_created_updatedDownSql,
	"000005_created_updated.up.sql":                     _000005_created_updatedUpSql,
	"000006_created_updated_delmark_for_route.down.sql": _000006_created_updated_delmark_for_routeDownSql,
	"000006_created_updated_delmark_for_route.up.sql":   _000006_created_updated_delmark_for_routeUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_zero.down.sql":                              &bintree{_000001_zeroDownSql, map[string]*bintree{}},
	"000001_zero.up.sql":                                &bintree{_000001_zeroUpSql, map[string]*bintree{}},
	"000002_init.down.sql":                              &bintree{_000002_initDownSql, map[string]*bintree{}},
	"000002_init.up.sql":                                &bintree{_000002_initUpSql, map[string]*bintree{}},
	"000003_route.down.sql":                             &bintree{_000003_routeDownSql, map[string]*bintree{}},
	"000003_route.up.sql":                               &bintree{_000003_routeUpSql, map[string]*bintree{}},
	"000004_deletionmark.down.sql":                      &bintree{_000004_deletionmarkDownSql, map[string]*bintree{}},
	"000004_deletionmark.up.sql":                        &bintree{_000004_deletionmarkUpSql, map[string]*bintree{}},
	"000005_created_updated.down.sql":                   &bintree{_000005_created_updatedDownSql, map[string]*bintree{}},
	"000005_created_updated.up.sql":                     &bintree{_000005_created_updatedUpSql, map[string]*bintree{}},
	"000006_created_updated_delmark_for_route.down.sql": &bintree{_000006_created_updated_delmark_for_routeDownSql, map[string]*bintree{}},
	"000006_created_updated_delmark_for_route.up.sql":   &bintree{_000006_created_updated_delmark_for_routeUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
