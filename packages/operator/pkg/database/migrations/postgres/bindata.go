// Code generated by go-bindata.
// sources:
// pkg/database/migrations/postgres/sources/000001_zero.down.sql
// pkg/database/migrations/postgres/sources/000001_zero.up.sql
// pkg/database/migrations/postgres/sources/000002_init.down.sql
// pkg/database/migrations/postgres/sources/000002_init.up.sql
// DO NOT EDIT!

package postgres

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_zeroDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xa8\x4a\x2d\xca\x57\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\x03\x04\x00\x00\xff\xff\x55\xb8\xd3\x29\x11\x00\x00\x00")

func _000001_zeroDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_zeroDownSql,
		"000001_zero.down.sql",
	)
}

func _000001_zeroDownSql() (*asset, error) {
	bytes, err := _000001_zeroDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_zero.down.sql", size: 17, mode: os.FileMode(420), modTime: time.Unix(1591633943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_zeroUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xa8\x4a\x2d\xca\x57\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\x03\x04\x00\x00\xff\xff\x55\xb8\xd3\x29\x11\x00\x00\x00")

func _000001_zeroUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_zeroUpSql,
		"000001_zero.up.sql",
	)
}

func _000001_zeroUpSql() (*asset, error) {
	bytes, err := _000001_zeroUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_zero.up.sql", size: 17, mode: os.FileMode(420), modTime: time.Unix(1591633943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x4f\x49\xcc\x28\x8d\xcf\x2f\x48\x2d\x4a\x2c\xc9\x2f\x8a\x2f\x29\x4a\xcc\xcc\xcb\xcc\x4b\x27\x4e\x75\x41\x62\x72\x76\x62\x3a\xd1\xca\x53\x52\x0b\x72\xf2\x2b\x73\x53\xf3\x4a\x48\x73\x4c\x7c\x66\x5e\x49\x6a\x7a\x51\x62\x49\x66\x7e\x1e\x89\x0e\x43\xd5\xea\xec\xef\xeb\xeb\x19\xa2\x60\x0d\x08\x00\x00\xff\xff\x80\xaa\x9b\xf0\x11\x01\x00\x00")

func _000002_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_initDownSql,
		"000002_init.down.sql",
	)
}

func _000002_initDownSql() (*asset, error) {
	bytes, err := _000002_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init.down.sql", size: 273, mode: os.FileMode(420), modTime: time.Unix(1591692966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000002_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\xd1\xc1\x8a\x83\x30\x10\x06\xe0\x7b\x9e\x62\x8e\x0a\x7b\x5c\xf6\xe2\x29\x4a\x76\x37\x6d\xd5\x12\x43\xa9\x27\x19\x34\x68\xa8\x4d\x42\x1c\x0f\x7d\xfb\x42\xdb\x17\xe8\xa1\x78\x9c\xe1\x87\xef\x87\x3f\x17\x7f\xb2\xca\x18\x2b\x94\xe0\x5a\x80\xe6\xf9\x41\x80\xfc\x85\xaa\xd6\x20\xce\xb2\xd1\x0d\xf8\x01\xa7\xb5\xf3\xc1\x44\x24\x1f\x3b\x8a\x68\x9d\x75\x23\x4b\x18\x00\x80\x1d\x00\xe0\xc4\x55\xf1\xcf\x55\xf2\xf3\x9d\xc2\x51\xc9\x92\xab\x16\xf6\xa2\xfd\x7a\x24\x96\x60\x7a\xd8\x35\x75\x95\xbf\x6e\x42\x5a\x97\xe7\x87\xa5\x19\x7b\x07\x0f\xd8\x5f\x70\xdc\x4a\x1f\x4c\x98\xfd\xed\x6a\x1c\x6d\xc2\x93\xf7\x73\x3f\xa1\x75\x9d\x75\x64\xc6\x88\x64\xbd\xdb\x76\x86\xcf\x34\x29\xea\xb2\x94\x3a\xbb\x07\x00\x00\xff\xff\x09\x72\x36\x73\x9c\x02\x00\x00")

func _000002_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_initUpSql,
		"000002_init.up.sql",
	)
}

func _000002_initUpSql() (*asset, error) {
	bytes, err := _000002_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_init.up.sql", size: 668, mode: os.FileMode(420), modTime: time.Unix(1591692966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_zero.down.sql": _000001_zeroDownSql,
	"000001_zero.up.sql":   _000001_zeroUpSql,
	"000002_init.down.sql": _000002_initDownSql,
	"000002_init.up.sql":   _000002_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_zero.down.sql": &bintree{_000001_zeroDownSql, map[string]*bintree{}},
	"000001_zero.up.sql":   &bintree{_000001_zeroUpSql, map[string]*bintree{}},
	"000002_init.down.sql": &bintree{_000002_initDownSql, map[string]*bintree{}},
	"000002_init.up.sql":   &bintree{_000002_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
