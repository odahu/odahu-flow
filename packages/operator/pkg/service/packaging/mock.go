// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package packaging

import (
	context "context"

	"github.com/odahu/odahu-flow/packages/operator/pkg/apis/packaging"
	filter "github.com/odahu/odahu-flow/packages/operator/pkg/utils/filter"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/odahu/odahu-flow/packages/operator/api/v1alpha1"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// CreateModelPackaging provides a mock function with given fields: ctx, mt
func (_m *MockService) CreateModelPackaging(ctx context.Context, mt *packaging.ModelPackaging) error {
	ret := _m.Called(ctx, mt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *packaging.ModelPackaging) error); ok {
		r0 = rf(ctx, mt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModelPackaging provides a mock function with given fields: ctx, id
func (_m *MockService) DeleteModelPackaging(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetModelPackaging provides a mock function with given fields: ctx, id
func (_m *MockService) GetModelPackaging(ctx context.Context, id string) (*packaging.ModelPackaging, error) {
	ret := _m.Called(ctx, id)

	var r0 *packaging.ModelPackaging
	if rf, ok := ret.Get(0).(func(context.Context, string) *packaging.ModelPackaging); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*packaging.ModelPackaging)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModelPackagingList provides a mock function with given fields: ctx, options
func (_m *MockService) GetModelPackagingList(ctx context.Context, options ...filter.ListOption) ([]packaging.ModelPackaging, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []packaging.ModelPackaging
	if rf, ok := ret.Get(0).(func(context.Context, ...filter.ListOption) []packaging.ModelPackaging); ok {
		r0 = rf(ctx, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]packaging.ModelPackaging)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...filter.ListOption) error); ok {
		r1 = rf(ctx, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDeletionMark provides a mock function with given fields: ctx, id, value
func (_m *MockService) SetDeletionMark(ctx context.Context, id string, value bool) error {
	ret := _m.Called(ctx, id, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, id, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateModelPackaging provides a mock function with given fields: ctx, mt
func (_m *MockService) UpdateModelPackaging(ctx context.Context, mt *packaging.ModelPackaging) error {
	ret := _m.Called(ctx, mt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *packaging.ModelPackaging) error); ok {
		r0 = rf(ctx, mt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateModelPackagingStatus provides a mock function with given fields: ctx, id, status, spec
func (_m *MockService) UpdateModelPackagingStatus(ctx context.Context, id string, status v1alpha1.ModelPackagingStatus, spec packaging.ModelPackagingSpec) error {
	ret := _m.Called(ctx, id, status, spec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, v1alpha1.ModelPackagingStatus, packaging.ModelPackagingSpec) error); ok {
		r0 = rf(ctx, id, status, spec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
