// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/inspectors/spec_templates/triton_oas_template.json (4.181kB)

package bindata

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _triton_oas_templateJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x8f\xd3\x40\x0c\xbd\xf7\x57\x58\x03\xc7\x6a\xb3\x2a\xb7\x5e\x17\x09\xf5\x00\x48\xbb\x88\x0b\x42\x68\x9a\x38\xe9\x40\x32\x33\xeb\x71\x16\xaa\x2a\xff\x1d\xcd\xf4\x2b\x49\x53\xda\xf4\x4b\x08\x71\xda\xec\x8c\x9f\x63\x3f\x3f\x3b\xee\x62\x00\x20\xdc\x4f\x99\x65\x48\x62\x0c\x62\x74\x77\x2f\x86\xfe\x4c\xe9\xd4\x88\x31\xf8\x7b\x00\x91\xa0\x8b\x49\x59\x56\x46\x7b\xab\xc5\x02\xee\xde\x9b\x04\xf3\x0f\xb2\x40\xa8\xaa\x00\x01\x10\x2f\x48\x6e\x65\x02\x1b\x9b\xcf\xcb\xc3\x9a\x19\x2b\xce\xb1\xd3\xcf\x00\xa0\x0a\xaf\xb7\x92\x67\x6e\xfb\xfe\xe8\x65\x14\x15\xde\xd0\x45\x3b\x98\xb5\x11\x80\xc8\x90\x6b\xff\x7a\x37\x64\x92\x32\x46\xef\xe9\xcb\xe6\x14\x40\x48\x6b\x73\x15\x4b\x9f\x4f\xf4\xdd\x19\x2d\x36\x97\x5f\x87\x35\xb4\x24\x59\x20\x23\x05\x7c\xfd\x86\xd0\x59\xa3\x1d\xba\xc6\xeb\x00\xc4\xe8\xfe\xbe\x75\xb4\xcb\xde\x3b\x64\x08\x19\xc0\x83\xd1\xa9\xca\x4a\x0a\x81\x88\x61\x13\xe5\xe2\x19\x16\x72\xc7\x1b\x80\x78\x4d\x98\x7a\x47\xaf\xa2\x04\x53\xa5\x95\x47\xbb\x28\xb8\x6c\x7a\x6c\x00\xab\x41\xd7\xf3\xfa\x69\xf9\xb7\x1a\x1e\xe4\x3b\x22\x94\xc9\xfc\x24\xd6\x19\x7f\x71\x64\x73\xa9\x6e\xcb\xf7\xc3\x0c\xe3\x1f\xa0\x52\xe0\x19\x42\xc8\x0a\x94\x83\x90\x06\xb0\x01\xa5\x53\xa4\xe3\xc9\xe7\xb9\x0d\xda\x75\x4c\x4a\x67\xd7\xa1\x78\x19\x52\x8d\x62\x6b\x5c\x8b\xe3\xd8\x68\x57\x16\x27\x2b\xfb\x82\x7d\x51\xc3\xb7\xea\xa0\x02\xfd\x53\x93\xcc\xdb\xf4\x6a\x59\xe0\xbe\x3b\xc2\xe7\x52\x11\x26\x62\x0c\x4c\x25\x9e\xd9\x15\x13\x4f\xe5\x23\x3e\x97\xe8\xf8\x98\x62\x5d\x4c\x75\x6f\x37\x41\x40\x86\x1a\x49\x32\x26\x90\x92\x29\xe0\x69\x39\x6e\x61\xa2\x9d\xc5\x98\x4d\x0f\xf1\x75\xe7\xf8\x88\xae\xcc\x8f\xca\xae\x25\xc5\xcd\xb8\xad\x79\xdb\x0e\xdd\x89\xb6\x25\x7f\x42\xed\x4c\x53\x8b\x64\x2c\x12\xab\x16\x2d\xeb\x9a\x36\x88\xda\xd7\x2c\x55\x8d\x65\x37\x93\x76\x2f\x50\x12\xc9\xa6\x42\x84\x62\x2c\xda\x15\xa9\x21\x94\x66\xcc\x76\x1b\x3a\x35\x54\x48\x5e\x19\xbc\x19\x89\x6e\x7a\x6a\x61\x25\x92\xe5\xca\x67\xef\x94\x3c\xf6\x94\x8c\x0e\xcd\x8c\x86\x98\x8f\x28\x89\xf2\x15\xdc\x51\x6f\x7f\x6e\xf7\xb5\xd6\x56\x1f\x3d\x06\x5f\x80\x3d\x59\x8c\xaf\x29\xaa\x73\xaa\xf7\x37\x09\xb2\x93\xc1\x8f\x25\xff\xa7\xf0\x3c\x0a\x3b\x96\xa5\x2b\x52\xb9\xda\x8b\x2f\xd0\x89\xfb\xb7\x8f\xee\x29\x66\x73\xc9\x9e\xa6\x53\xa2\xbe\xc1\xf4\x08\x1a\x3e\x98\x84\x09\x7a\xbf\x5a\x24\xb5\x76\xea\xdd\x84\xd7\xff\x3c\xfe\x2b\x6d\x78\x81\xcf\x63\x77\x54\xba\x2c\xa6\x7f\x0a\x2a\x31\xe5\x34\xc7\x3e\xa5\x5d\xed\x53\x47\x14\x35\x2c\xf0\xdf\x4e\x2d\xed\x12\xbd\xfd\xd1\xdc\xdb\xc1\x4d\x1a\xa3\xc7\x17\xde\xef\x93\x83\x6a\xf0\x3b\x00\x00\xff\xff\x7a\x9e\x71\x9b\x55\x10\x00\x00")

func triton_oas_templateJsonBytes() ([]byte, error) {
	return bindataRead(
		_triton_oas_templateJson,
		"triton_oas_template.json",
	)
}

func triton_oas_templateJson() (*asset, error) {
	bytes, err := triton_oas_templateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "triton_oas_template.json", size: 4181, mode: os.FileMode(0664), modTime: time.Unix(1634714528, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0x29, 0x3c, 0x6d, 0xa9, 0x8e, 0xf0, 0x74, 0x37, 0x41, 0xfd, 0x3d, 0x43, 0x81, 0x1d, 0x72, 0x49, 0xe3, 0xf4, 0xd3, 0xbf, 0xbc, 0x98, 0xd3, 0x7a, 0xdf, 0x8a, 0x13, 0x92, 0x3d, 0x7a, 0xce}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"triton_oas_template.json": triton_oas_templateJson,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"triton_oas_template.json": {triton_oas_templateJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
