// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	deployment "github.com/odahu/odahu-flow/packages/operator/pkg/apis/deployment"
	filter "github.com/odahu/odahu-flow/packages/operator/pkg/utils/filter"

	mock "github.com/stretchr/testify/mock"

	postgres "github.com/odahu/odahu-flow/packages/operator/pkg/repository/util/postgres"

	v1alpha1 "github.com/odahu/odahu-flow/packages/operator/api/v1alpha1"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateModelDeployment provides a mock function with given fields: ctx, qrr, md
func (_m *Repository) CreateModelDeployment(ctx context.Context, qrr postgres.Querier, md *deployment.ModelDeployment) error {
	ret := _m.Called(ctx, qrr, md)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.Querier, *deployment.ModelDeployment) error); ok {
		r0 = rf(ctx, qrr, md)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateModelRoute provides a mock function with given fields: md
func (_m *Repository) CreateModelRoute(md *deployment.ModelRoute) error {
	ret := _m.Called(md)

	var r0 error
	if rf, ok := ret.Get(0).(func(*deployment.ModelRoute) error); ok {
		r0 = rf(md)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModelDeployment provides a mock function with given fields: ctx, qrr, id
func (_m *Repository) DeleteModelDeployment(ctx context.Context, qrr postgres.Querier, id string) error {
	ret := _m.Called(ctx, qrr, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.Querier, string) error); ok {
		r0 = rf(ctx, qrr, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteModelRoute provides a mock function with given fields: name
func (_m *Repository) DeleteModelRoute(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetModelDeployment provides a mock function with given fields: ctx, qrr, id
func (_m *Repository) GetModelDeployment(ctx context.Context, qrr postgres.Querier, id string) (*deployment.ModelDeployment, error) {
	ret := _m.Called(ctx, qrr, id)

	var r0 *deployment.ModelDeployment
	if rf, ok := ret.Get(0).(func(context.Context, postgres.Querier, string) *deployment.ModelDeployment); ok {
		r0 = rf(ctx, qrr, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deployment.ModelDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgres.Querier, string) error); ok {
		r1 = rf(ctx, qrr, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModelDeploymentList provides a mock function with given fields: ctx, qrr, options
func (_m *Repository) GetModelDeploymentList(ctx context.Context, qrr postgres.Querier, options ...filter.ListOption) ([]deployment.ModelDeployment, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, qrr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []deployment.ModelDeployment
	if rf, ok := ret.Get(0).(func(context.Context, postgres.Querier, ...filter.ListOption) []deployment.ModelDeployment); ok {
		r0 = rf(ctx, qrr, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]deployment.ModelDeployment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, postgres.Querier, ...filter.ListOption) error); ok {
		r1 = rf(ctx, qrr, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModelRoute provides a mock function with given fields: name
func (_m *Repository) GetModelRoute(name string) (*deployment.ModelRoute, error) {
	ret := _m.Called(name)

	var r0 *deployment.ModelRoute
	if rf, ok := ret.Get(0).(func(string) *deployment.ModelRoute); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deployment.ModelRoute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModelRouteList provides a mock function with given fields: options
func (_m *Repository) GetModelRouteList(options ...filter.ListOption) ([]deployment.ModelRoute, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []deployment.ModelRoute
	if rf, ok := ret.Get(0).(func(...filter.ListOption) []deployment.ModelRoute); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]deployment.ModelRoute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...filter.ListOption) error); ok {
		r1 = rf(options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDeletionMark provides a mock function with given fields: ctx, qrr, id, value
func (_m *Repository) SetDeletionMark(ctx context.Context, qrr postgres.Querier, id string, value bool) error {
	ret := _m.Called(ctx, qrr, id, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.Querier, string, bool) error); ok {
		r0 = rf(ctx, qrr, id, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateModelDeployment provides a mock function with given fields: ctx, qrr, md
func (_m *Repository) UpdateModelDeployment(ctx context.Context, qrr postgres.Querier, md *deployment.ModelDeployment) error {
	ret := _m.Called(ctx, qrr, md)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.Querier, *deployment.ModelDeployment) error); ok {
		r0 = rf(ctx, qrr, md)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateModelDeploymentStatus provides a mock function with given fields: ctx, qrr, id, s
func (_m *Repository) UpdateModelDeploymentStatus(ctx context.Context, qrr postgres.Querier, id string, s v1alpha1.ModelDeploymentStatus) error {
	ret := _m.Called(ctx, qrr, id, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, postgres.Querier, string, v1alpha1.ModelDeploymentStatus) error); ok {
		r0 = rf(ctx, qrr, id, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateModelRoute provides a mock function with given fields: md
func (_m *Repository) UpdateModelRoute(md *deployment.ModelRoute) error {
	ret := _m.Called(md)

	var r0 error
	if rf, ok := ret.Get(0).(func(*deployment.ModelRoute) error); ok {
		r0 = rf(md)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
